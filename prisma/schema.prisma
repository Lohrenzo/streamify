// Complete NextAuth compatible Prisma schema
generator client {
    provider = "prisma-client-js"
    output   = "../lib/generated/prisma"
}

datasource db {
    // SQLite for development
    provider = "sqlite"
    url      = "file:./dev.sqlite"
    // PostgreSQL for production
    // provider = "postgresql"
    // url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    first_name    String?
    last_name     String?
    email         String    @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    username      String?   @unique
    password      String? // For credentials auth
    dob           DateTime?
    role          String    @default("USER")
    bio           String?
    created_at    DateTime  @default(now())
    updated_at    DateTime  @updatedAt

    accounts Account[]
    sessions Session[]
    videos   Video[]
    likes    Like[]
    comments Comment[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Video {
    id           String   @id @default(cuid())
    title        String
    manifestUrl  String
    thumbnailUrl String
    uploadDate   DateTime @default(now())
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    likes    Like[]
    comments Comment[]

    @@map("videos")
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    videoId   String
    createdAt DateTime @default(now())

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@unique([userId, videoId])
    @@map("likes")
}

model Comment {
    id        String   @id @default(cuid())
    userId    String
    videoId   String
    content   String
    createdAt DateTime @default(now())

    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

    @@map("comments")
}
